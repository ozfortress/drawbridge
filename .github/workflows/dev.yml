name: Deploy to Dev

on:
  push:
    branches:
      - dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: [self-hosted,drawbridge]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.PACKAGE_USERNAME }}
          password: ${{ secrets.PACKAGE_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: drawbridge
    needs: build

    env:
      DOCKER_BUILDKIT: 1
      WAIT_TIME: 30
      CONTAINER_NAME: "drawbridge_dev"
      ENV_FILE_PATH: "/opt/ozf-projects/drawbridge/dev.env"

    steps:
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.PACKAGE_USERNAME }}
          password: ${{ secrets.PACKAGE_TOKEN }}

      - name: Deploy Docker Container
        run: |
          if [ "$(docker ps -a -q -f name=${CONTAINER_NAME})" ]; then
            docker rm -f ${CONTAINER_NAME}
          fi
          docker pull ghcr.io/ozfortress/drawbridge:dev
          docker run -d \
            --name ${CONTAINER_NAME} \
            --env-file ${{ env.ENV_FILE_PATH }} \
            ghcr.io/ozfortress/drawbridge:dev

      # - name: Verify deployment via Docker Healthcheck
      #   run: |
      #     for i in {1..${WAIT_TIME}}; do
      #       if [ "$(docker inspect -f '{{.State.Health.Status}}' ${CONTAINER_NAME})" -eq "healthy" ];
      #         echo "Container is healthy"
      #         exit 0
      #       else
      #         echo "Container is unhealthy"
      #       fi
      #       sleep 1
      #     done
      #     echo "Container failed to start"
      #     exit 1
